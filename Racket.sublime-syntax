%YAML 1.2
---
# See:
#   Syntax: http://www.sublimetext.com/docs/3/syntax.html
#   Scope naming: https://www.sublimetext.com/docs/3/scope_naming.html

# Note that blackslashes don't need to be escaped within single quoted
# strings in YAML. When using single quoted strings, only single quotes
# need to be escaped: this is done by using two single quotes next to each
# other.

file_extensions:
  - rkt
scope: source.racket
first_line_match: \#lang [\w/]+
contexts:
  main:
    # Language declaration
    - match: (#lang )([\w/]+)
      captures:
        1: keyword.other.racket
        2: entity.name.namespace.racket

    # Package import
    - match: \((require)\s*([\w/-]+)\s*\)
      captures:
        1: keyword.control.import.racket
        2: entity.name.namespace.racket

    # Inbuilt special atomic value
    - match: ((\#t(rue)?|#f(alse)?|'\(\)))\b
      captures:
        1: constant.language.racket

    # String
    - match: '"'
      scope: punctuation.definition.string.begin.racket
      push: double_quoted_string

    # Line comment
    - match: ;
      scope: punctuation.definition.comment.racket
      push: line_comment

    # Function reference
    - match: \((([\w\?\.\-]+))
      captures:
        1: variable.function.racket

    # TODO: broken
    # Function definition
    # - match: \(define\s+\(
    #   scope: meta.function.racket
    #   push: function_definition


    # Variable definition
    - match: \((define)\s+([\w\-?\+^]+)\s*
      captures:
        1: keyword.control.racket
        2: variable.other.racket


    # Classes
    - match: \b[\w-]+%
      scope: entity.name.class

    # Number
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.racket

    # Keyword (not simply inbuilt functions)
    - match: \b(if|lambda|cond|define|type-case|let|letrec|let!|require|test|else|define-type|define-type-alias|define-struct|not|local|error|send|new)[\s\)]
      scope: keyword.control.racket

  # BROKEN
  # function_definition:
  #   - meta_scope: meta.function.racket
  #   - match: ^([\w\-\?]+)
  #     scope: variable.function.racket
  #   - match: \s+[\w\-\?]
  #     push: parameters
  #   - match: \)
  #     pop: true

  parameters:
    - meta_scope: meta.function.parameters.racket
    - match: \)
      pop: true

  double_quoted_string:
    - meta_scope: string.quoted.double.racket
    - match: \\.
      scope: constant.character.escape.racket
    - match: '"'
      scope: punctuation.definition.string.end.racket
      pop: true

  line_comment:
    - meta_scope: comment.line.racket
    - match: $
      pop: true

  # UNUSED
  identifier:
    - meta_scope: variable.other.racket
    - match: /[^\w-\?\+\.=<>]/
      pop: true
